// data available
if(usize>1)
{
  bufferPos=0
  while(bufferPos<usize)
  {
    // check for 0x55 0xBB - Command Init Secuence
    if(u[bufferPos]==187&&u[bufferPos-1]==85)
    {
      //remove garbage at the start of the buffer if there's any to free buffer for command
      if(u[bufferPos]!=1)
      {
        udelete bufferPos-1
      }
      //instruction is now aligned with buffer, because we deleted garbage before instrcution
      //get length after init sequence (check if there are more than to bytes in buffer)
      if(3<usize)
      {
        // check if serial buffer has reached the announced length
        ucopy payloadLength,2,2,0
        // we are only checking payload length so we have to skip first 3 bytes (init+payload length) (-1 because of < instead of <=)
        payloadLength+=3
        // payload length does also not contain crc, so we are adding another 2 bytes for crc
        payloadLength+=2
        if(payloadLength<usize)
        {
          // calculate crc
          crcrest 1,0xFFFF
          // u[2] contains payload legth at 3rd pos in buffer, we are calculating crc from 3rd pos with number of bytes from payload length
          //crcputu 3,u[2]
          // u[2] contains payload length, we are calculating a crc over the whole message, so we have to add 3 to the length from u[2]
          crcputu 0,payloadLength-1
          // get recived crc to be able to compare it
          ucopy recvCrc,payloadLength-1,2,0
          // compare crc with recived value
          if(crcval==recvCrc)
          {
            // crc is okay
            // here is the location where acual code should be
            // write command to variable strCommand
            ucopy instructions.command.txt,4,payloadLength-5,0
            spstr instructions.command.txt,instructions.type.txt,"~",0
            if(instructions.type.txt=="setTextById")
            {
              //setTextById~1~Text
              spstr instructions.command.txt,instructions.objectIdStr.txt,"~",1
              spstr instructions.command.txt,instructions.value.txt,"~",2
              //The b[.id] component array which takes component .id as index
              covx instructions.objectIdStr.txt,instructions.objectId.val,0,0
              b[instructions.objectId.val].txt=instructions.value.txt
              //The p[index] page array which takes page index as index
            }
            if(instructions.type.txt=="pageByName")
            {
              //pageByName~pageHome
              // dim=100
              //command format page,pageName
              spstr instructions.command.txt,instructions.objectName.txt,"~",1
              //we are going to exit this page with this command, so we have to clear the buffer, so we are not getting into a stupid loop ...
              udelete payloadLength-1
              bufferPos=0
              if(instructions.objectName.txt=="pageHome")
              {
                page pageHome
              }
              if(instructions.objectName.txt=="instructions")
              {
                page instructions
              }
            }
            if(instructions.type.txt=="pageById")
            {
              //pageById~1
              spstr instructions.command.txt,instructions.objectIdStr.txt,"~",1
              covx instructions.objectIdStr.txt,instructions.objectId.val,0,0
              b[instructions.objectId.val].txt=instructions.value.txt
			  
			  //we are going to exit this page with this command, so we have to clear the buffer, so we are not getting into a stupid loop ...
              udelete payloadLength-1
              bufferPos=0
			  
              //The p[index] page array which takes page index as index              
              page p[instructions.objectId.val]
            }
            if(instructions.type.txt=="setBGColorById"||instructions.type.txt=="setFGColorById")
            {
              //setBGColorById~1~63488
              //rot: 63488
              //gruen: 1024
              
              spstr instructions.command.txt,instructions.objectIdStr.txt,"~",1
              spstr instructions.command.txt,instructions.value.txt,"~",2
              //The b[.id] component array which takes component .id as index
              covx instructions.objectIdStr.txt,instructions.objectId.val,0,0
              covx instructions.value.txt,instructions.valueAsNumber.val,0,0
              
              if(instructions.type.txt=="setBGColorById")
              {
                b[instructions.objectId.val].bco=instructions.valueAsNumber.val
              }
              else
              {
                b[instructions.objectId.val].pco=instructions.valueAsNumber.val
              }
            }
            
            // end of user code
            udelete payloadLength-1
            bufferPos=0
          }
        }
      }
    }
    // next character
    bufferPos++
  }
}
